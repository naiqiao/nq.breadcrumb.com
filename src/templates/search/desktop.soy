{namespace desktop.search}

/**
 * @param base
 * @param locations
 * @param query
 * @param queryLocation
// * @param currentPage
// * @param resultsPerPage
// * @param queryParams
 * @param businessId Passthrough
 * @param siteId Passthrough
 * @param searchId Passthrough
 * @param siteDomain Passthrough
 * @param locale
 * @param customByName
 */
{template .default}

  {let $prettyQuery}
    {call components.search.pretty_city_state_query data="all" /}
  {/let}

  {let $searcherPath}
    {call common.helpers.searcherPath /}
  {/let}

  {let $directoryPath}
    {call common.helpers.directoryPath /}
  {/let}

  {let $searchUrl}
    {$searcherPath |noAutoescape}?q={$prettyQuery}
  {/let}

  {let $queryCrumb}
    "{$prettyQuery}"
  {/let}

  {let $baseCrumbsNames: ['Locations', 'Find a Location'] /}
  {let $baseCrumbs: [$directoryPath, $searcherPath] /}

  {call common.layout data="all"}
    {param baseUrl: $base.url /}
    {param pageTitle}
      Find a Nearby School of Rock
    {/param}
    {param metaDescription}  // TODO: These should be customized
    {/param}
    {param metaKeywords}
      {call common.helpers.keywords /}
    {/param}

    {param useminHeader}
      {call usemin.search_styles data="all" /}
    {/param}

    {param crumbNames: strlen($prettyQuery ?: '') > 0 ? augmentList($baseCrumbsNames, [$queryCrumb]) : $baseCrumbsNames /}
    {param crumbUrls: strlen($prettyQuery ?: '') > 0 ? augmentList($baseCrumbs, [$searchUrl] ) : $baseCrumbs /}
    {param country: 'US' /}
    {param pageContent}
      <div class="search-container">

        <div class="map-desktop">
          {call components.maps.mapSetup data="all"}
            {param zoom: 9 /}
            {param disableMapControl: false /}
            {param keys: $locations /}
            {param mapID: 'desktop-map' /}
          {/call}
        </div>

        <div class="search-content-wrapper">
          <div class="search-content">
            <h1 class="search-title">
              <span class="search-title-main">
                Find a Nearby School of Rock
              </span>
            </h1>

            {call common.helpers.simple_search}
              {param baseUrl: $base.url /}
              {param defaultValue: $prettyQuery /}
            {/call}

            <div class="search-links-wrapper">
              {call common.helpers.locate_me /}

              <div class="browse-by-state-wrapper">
                <a class="browse-by-state"
                   href="{$base.url}{call common.helpers.directoryPath /}">
                  Browse All Locations
                </a>
              </div>
            </div>

            <div class="map-mobile">
              <details class="map-details"
                       id="js-map-details">
                <summary class="map-summary">
                  <span class='map-summary-label-closed'>View Map</span>
                  <span class='map-summary-label-open'>Hide Map</span>
                  <a class="browse-by-state"
                     href="{$base.url}{call common.helpers.directoryPath /}">
                    Browse All Locations
                  </a>
                </summary>
                {call components.maps.mapSetup data="all"}
                  {param zoom: 9 /}
                  {param disableMapControl: false /}
                  {param keys: $locations /}
                  {param mapID: 'mobile-map' /}
                {/call}
              </details>
            </div>

            <div class="search-results">
              {if strlen($prettyQuery) > 0}
                <div class="search-results-count">
                  {$base.count} locations near {call .pretty_query}{param prettyQuery: $prettyQuery /}{/call}
                </div>
              {/if}

              {foreach $location in $locations}
                {if isFirst($location)}
                  <ol class="location-list">
                {/if}
                    <li class="location-list-item">
                      {call .location data="$location"}
                        {param baseUrl: $base.url /}
                      {/call}
                    </li>
                {if isLast($location)}
                  </ol>
                {/if}
              {ifempty}
                {if strlen($prettyQuery) > 0}
                  No Results Found for {call .pretty_query}{param prettyQuery: $prettyQuery /}{/call}
                {else}
                {/if}
              {/foreach}
            </div>
          </div>
        </div>
      </div>
    {/param}

    {param useminFooter}
      {call usemin.search_js data="all" /}
    {/param}

    {param analytics}
      {call components.yext_analytics.search data="all" /}
    {/param}

    {param pageLevel: 'store_locator' /}

  {/call}

{/template}

/**
 * @param prettyQuery
 */
{template .pretty_query}
  <span class="user-query">"{$prettyQuery}"</span>
{/template}

/**
 * @param? pageNum
 * @param queryParams
 */
 {template .query_string_for_page}
  {foreach $key in keys($queryParams)}
    {if $pageNum and $key == 'p'}
      p={$pageNum}
    {else}
      {$key}={foreach $value in $queryParams[$key]}
        {$value}{if not isLast($value)},{/if}
      {/foreach}
    {/if}
    {if not isLast($key)}
      &
    {/if}
  {/foreach}
  {if $pageNum and length($queryParams['p'] ?: [])==0}
    &p={$pageNum}
  {/if}
 {/template}

/**
 * @param loc
 * @param url
 * @param baseUrl
 */
{template .location}
  <div class="location" itemscope itemtype="http://schema.org/MusicStore">
    <h2 class="location-title" itemprop="name">
      <a class="location-title-main"
         href="{$baseUrl}{$url}" itemprop="url">
        {call common.helpers.location_name data="$loc" /}
      </a>
    </h2>

    <div class="location-address">
      {call components.address data="$loc"}
        {param includeCountry: 'no' /}
        {param schemaOrg: true /}
        {param stateAbbr: true /}
      {/call}
    </div>

    <div class="location-phone">
      {call components.phones_with_include data="$loc"}
        {param includeKeys: ['MAIN'] /}
      {/call}
    </div>

    <div class="location-hours-today">
      {call components.hours.location_hours_today data="$loc" /}
    </div>

    <div class="location-link-wrapper">
      <a class="location-link"
         href="{$baseUrl}{$url}"
         id="visit-local-page-{call common.helpers.location_name_slug data="$loc" /}">
        Visit Local Page
      </a>
      {sp}
      <a href="{call components.maps.get_directions_url data="$loc" /}"
         class="c-get-directions-button location-link"
         id="get-directions-{call common.helpers.location_name_slug data="$loc" /}">
         Get Directions
      </a>
    </div>
  </div>
{/template}
